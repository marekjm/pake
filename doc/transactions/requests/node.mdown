### Node requests

Node requests operate on node elements.
Their prefix in function calls is `node.`.

*Example:*

    node.manager.init("/home/user")

*(this would initialize a node in user's home directory)*

----

#### Available requests

Here is a list of all node-related requests which can be used in transactions.

*   **(NI)** is added if given request has not been implemented yet,
*   **(DEP)** is added if given request is deprecated,
*   **(UNS)** is added if given request has unsure state (could be moved to different module, different name, etc.) and
    users should use it with caution,

Some requests place values on stack.
In PAKE transaction-runner stack is used to make results of calls available to outer world.
Stack is a list of values returned by requests which return non-null values (e.g. various getters) and
can be obtained with `getstack()` method of runner.
First returned value is first item on stack.


----

**`node.manager.init(string path)`**

Initialize a node in a given `path` (which must be a directory).

*JSON*:

    {"call": "node.manager.init", "params": {"path": "/some/path"}}


----

**`node.manager.reinit(string path)`**

Reinitialize a node in a given `path` (which must be a directory).
Initialize node if it wasn't there.

*JSON*:

    {"call": "node.manager.reinit", "params": {"path": "/some/path"}}


----

**`node.manager.remove(string path)`**

Remove PAKE node from given `path` (must be a directory).

*JSON*:

    {"call": "node.manager.remove", "params": {"path": "/some/path"}}

----

**`node.config.meta.set(string key, string value)`**

Set key in node metadata.

*JSON*:

    {"call": "pake.config.meta.set", "params": {"key": "some-name", "value": "some value"}}


----

**`node.config.meta.get(string key)`**

Place value of given key on stack.
Raises error if given key cannot be found in metadata.

*JSON*:

    {"call": "pake.config.meta.get", "params": {"key": "some-name"}}


----

**`node.config.meta.remove(string key)`**

Remove key form node metadata.


----

**`node.config.meta.getkeys()`**

Place list of all available keys on stack.

*JSON*:

    {"call": "pake.config.meta.getkeys", "params": {}}

----

**`node.config.meta.reset()`**

Reset meta to default (empty) state.

*JSON*:

    {"call": "pake.config.meta.reset", "params": {}}


----

**`node.config.mirrors.set(string url, string host, string cwd = "")`**

Set new mirror.

*   `url`:  URL at which mirror can be accessed,
*   `host`: hostname which will be used for FTP connection,
*   `cwd`:  path to which PAKE will go after connecting to the FTP server,

*JSON*:

    {"call": "node.config.mirrors.set", "params": {"url": "https://pake.example.com", "host": "example.com", "cwd": "/pake"}}


----

**`node.config.mirrors.get(string url)`**

Place dictionary with mirror's data on stack.
Error raised when URL is not found in database.

*JSON*:

    {"call": "node.config.mirrors.get", "params": {"url", "https://pake.example.com"}}


----

**`node.config.mirrors.remove(string url)`**

Remove mirror with given URL from list of mirrors.
If URL cannot be found no error is raised.

*JSON*:

    {"call": "node.config.mirrors.remove", "params": {"url": "https://pake.example.com"}}


----

**`node.config.mirrors.geturls()`**

Place list of mirror URLs on stack.

*JSON*:

    {"call": "node.config.mirrors.geturls", "params": {}}


----

**`node.config.mirrors.genlist()`**

Generate `mirrors.json` file that will be available from REST API of mirrors.

*JSON*:

    {"call": "node.config.mirrors.genlist", "params": {}}


----

**`node.config.nests.register(string path)`**

Register a nest in the node.

*JSON*:

    {"call": node.config.nests.register", "params": {"path": "/some/path/to/nest"}}


----

**`node.config.nests.remove(string what, string by='name')`**

Remove nest from the list of registered nests.
If `by` is passed as `'name'` `what` is considered to be a name of the package.
If `by` is passed as `'path'` `what` is considered to be a path of the nest.

*JSON*:

    {"call": "node.config.nests.unregister", "params": {"what": "foo"}}
    {"call": "node.config.nests.unregister", "params": {"what": "foo", "by": "name"}}
    {"call": "node.config.nests.unregister", "params": {"what": "/home/user/path/to/nest", "by": "path"}}


----

**`node.config.nests.getpath(string name)`**

Place path to nest of package with the given name on stack.
Raises error when package with `name` is not registered.

*JSON*:

    {"call": "node.config.nests.getpath", "params": {"name": string}}


----

**`node.config.nests.getpaths()`**

Place list of paths to all registred nests on stack.

*JSON*:

    {"call": "node.config.nests.getpaths", "params": {}}


----

**`node.packages.genlist()`**

Generate list of packages provided by node.

*JSON*:

    {"call": "node.packages.genlist", "params": {}}


----

&nbsp;
